apply plugin: "kotlin"
apply plugin: "kotlin-spring"
apply plugin: "groovy"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "distribution"
apply plugin: "com.bmuschko.docker-remote-api"
apply plugin: "idea"

sourceSets {
    infra {
        java {
            srcDir "src/infra/docker"
        }
    }
}

dependencies {
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.boot:spring-boot-starter-webflux"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin"
    compile "org.jetbrains.kotlin:kotlin-reflect"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile "org.jetbrains.kotlin:kotlin-compiler-embeddable"
    compile "org.jetbrains.kotlin:kotlin-script-util"

    compile "com.fasterxml.jackson.core:jackson-databind:2.9.9"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.9"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.9"
    compile "org.apache.commons:commons-lang3:3.8.1"
    compile "com.google.guava:guava:27.0.1-jre"
    compile "com.cronutils:cron-utils:8.0.0"
    compile "org.quartz-scheduler:quartz:2.3.0"
    compile "org.quartz-scheduler:quartz-jobs:2.3.0"
    compile "org.jooq:jooq:3.11.7"
    compile "org.elasticsearch.client:elasticsearch-rest-high-level-client:6.5.4"
    compile "org.postgresql:postgresql:42.2.5"
    compile "org.codehaus.groovy:groovy:2.5.5"
    compile "org.codehaus.groovy:groovy-jsr223:2.5.5"
    compile "org.codehaus.groovy:groovy-json:2.5.5"
    compile "org.codehaus.groovy:groovy-xml:2.5.5"

    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("io.projectreactor:reactor-test")
    testCompile("org.springframework.security:spring-security-test")

    testCompile "org.spockframework:spock-spring:1.2-groovy-2.5"
    testCompile "org.awaitility:awaitility:3.1.3"
    testCompile "org.awaitility:awaitility-groovy:3.1.3"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = JavaVersion.VERSION_1_8
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = JavaVersion.VERSION_1_8
    }
}

springBoot {
    buildInfo()
    mainClassName = "lit.fass.litfass.server.ServerApplicationKt"
}
bootJar {
    enabled = false
}
jar {
    enabled = true
    baseName = project.name
    manifest {
        attributes "Implementation-Title": "LITFASS"
        attributes "Implementation-Version": version
        attributes "Main-Class": "lit.fass.litfass.server.ServerApplicationKt"
    }
}
task allJar(type: Jar) {
    classifier "all"
    manifest {
        attributes "Implementation-Title": "LITFASS"
        attributes "Implementation-Version": version
        attributes "Main-Class": "lit.fass.litfass.server.ServerApplicationKt"
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
assembleDist.dependsOn allJar

distributions {
    def runFile
    doFirst {
        runFile = File.createTempFile("run", ".sh")
        runFile.write """#!/bin/sh\njava -XX:+UseG1GC -XX:+UseStringDeduplication -XX:+HeapDumpOnOutOfMemoryError -server -ea -classpath "./*:./lib/*" lit.fass.litfass.server.ServerApplicationKt"""
        runFile.executable = true
        runFile.deleteOnExit()
    }
    main {
        contents {
            from(runFile) {
                rename { "run.sh" }
            }
            from jar
            into("lib") {
                from configurations.compile
            }
        }
    }
}

docker {
    registryCredentials {
        username = gradle.dockerHubUsername
        password = gradle.dockerHubPassword
        email = gradle.dockerHubEmail
    }
}
task prepareImage(type: Copy) {
    dependsOn distZip
    from zipTree(distZip.archivePath)
    include "${project.name}-${version}/lib/*"
    include "${project.name}-${version}/${project.name}-${version}.jar"
    from sourceSets.infra.allSource.srcDirs
    include "Dockerfile"
    into "${buildDir}/docker/"
    doLast {
        ant.move file: "${buildDir}/docker/${project.name}-${version}/lib/", todir: "${buildDir}/docker/"
        ant.move file: "${buildDir}/docker/${project.name}-${version}/${project.name}-${version}.jar", tofile: "${buildDir}/docker/app.jar"
        ant.delete dir: "${buildDir}/docker/${project.name}-${version}/", quiet: true
    }
}
task buildImage(type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage) {
    dependsOn prepareImage
    inputDir = file("${buildDir}/docker/")
    tag = "${gradle.dockerHubUsername}/${rootProject.name}:${version.toString().replaceAll("\\+", ".")}"
}
task pushImage(type: com.bmuschko.gradle.docker.tasks.image.DockerPushImage) {
    dependsOn buildImage
    imageName = "${gradle.dockerHubUsername}/${rootProject.name}"
    tag = version.toString().replaceAll("\\+", ".")
}

task unitTest(type: Test) {
    useJUnit {
        includeCategories "lit.fass.litfass.server.helper.UnitTest"
    }
}
task integrationTest(type: Test) {
    useJUnit {
        includeCategories "lit.fass.litfass.server.helper.IntegrationTest"
    }
}
