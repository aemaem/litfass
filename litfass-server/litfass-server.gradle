apply plugin: "kotlin"
apply plugin: "groovy"
apply plugin: "distribution"
apply plugin: "com.bmuschko.docker-remote-api"

sourceSets {
    infra {
        java {
            srcDir "src/infra/docker"
        }
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-compiler-embeddable:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-script-util:$kotlinVersion"
    compile "io.ktor:ktor-server-netty:$ktorVersion"
    compile "io.ktor:ktor-server-core:$ktorVersion"
    compile "io.ktor:ktor-auth:$ktorVersion"
    compile "io.ktor:ktor-jackson:$ktorVersion"
    compile "io.ktor:ktor-metrics:$ktorVersion"
    compile "io.ktor:ktor-client-apache:$ktorVersion"

    compile "ch.qos.logback:logback-classic:$logbackVersion"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"
    compile "org.apache.commons:commons-lang3:$commonsLang3Version"
    compile "com.cronutils:cron-utils:$cronUtilsVersion"
    compile "com.zaxxer:HikariCP:$hikariCpVersion"
    compile "org.jooq:jooq:$jooqVersion"
    compile "org.postgresql:postgresql:$postgresqlVersion"
    compile "org.elasticsearch.client:elasticsearch-rest-high-level-client:$elasticSearchVersion"

    testCompile "io.ktor:ktor-server-tests:$ktorVersion"
    testCompile "org.spockframework:spock-core:$spockVersion"
    testCompile "org.awaitility:awaitility:$awaitilityVersion"
    testCompile "org.awaitility:awaitility-groovy:$awaitilityVersion"
    testCompile "net.bytebuddy:byte-buddy:$byteBuddyVersion"
}

compileKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8
}
compileTestKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8
}

jar {
    baseName = project.name
    manifest {
        attributes "Implementation-Title": "LITFASS"
        attributes "Implementation-Version": version
        attributes "Main-Class": "lit.fass.litfass.server.AppKt"
    }
}

task allJar(type: Jar) {
    classifier "all"
    manifest {
        attributes "Implementation-Title": "LITFASS"
        attributes "Implementation-Version": version
        attributes "Main-Class": "lit.fass.litfass.server.AppKt"
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
assembleDist.dependsOn allJar

distributions {
    def runFile
    doFirst {
        runFile = File.createTempFile("run", ".sh")
        runFile.write """#!/bin/sh\njava -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -server -ea -classpath "./*:./lib/*" lit.fass.litfass.server.AppKt"""
        runFile.executable = true
        runFile.deleteOnExit()
    }
    main {
        contents {
            from(runFile) {
                rename { "run.sh" }
            }
            from jar
            into("lib") {
                from configurations.compile
            }
        }
    }
}

docker {
    registryCredentials {
        username = gradle.dockerHubUsername
        password = gradle.dockerHubPassword
        email = gradle.dockerHubEmail
    }
}
task prepareImage(type: Copy) {
    dependsOn distZip
    from zipTree(distZip.archivePath)
    include "${project.name}-${version}/lib/*"
    include "${project.name}-${version}/${project.name}-${version}.jar"
    from sourceSets.infra.allSource.srcDirs
    include "Dockerfile"
    from sourceSets.infra.resources.srcDirs
    include "application.conf"
    include "logback.xml"
    into "${buildDir}/docker/"
    doLast {
        ant.move file: "${buildDir}/docker/${project.name}-${version}/lib/", todir: "${buildDir}/docker/"
        ant.move file: "${buildDir}/docker/${project.name}-${version}/${project.name}-${version}.jar", tofile: "${buildDir}/docker/app.jar"
        ant.delete dir: "${buildDir}/docker/${project.name}-${version}/", quiet: true
    }
}
task buildImage(type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage) {
    dependsOn prepareImage
    inputDir = file("${buildDir}/docker/")
    tag = "${gradle.dockerHubUsername}/${rootProject.name}:${version.toString().replaceAll("\\+", ".")}"
}
task pushImage(type: com.bmuschko.gradle.docker.tasks.image.DockerPushImage) {
    dependsOn buildImage
    imageName = "${gradle.dockerHubUsername}/${rootProject.name}"
    tag = version.toString().replaceAll("\\+", ".")
}

task unitTest(type: Test) {
    useJUnit {
        includeCategories "lit.fass.litfass.server.helper.UnitTest"
    }
}
task integrationTest(type: Test) {
    useJUnit {
        includeCategories "lit.fass.litfass.server.helper.IntegrationTest"
    }
}
