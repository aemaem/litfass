litfass {
  http {
    interface = 0.0.0.0
    interface = ${?LITFASS_HTTP_INTERFACE}
    port = 8080
    port = ${?LITFASS_HTTP_PORT}
  }
  routes {
    ask-timeout = 5s
  }
  config {
    collection-path = ""
  }
  users {
    admin: {
      password: "admin"
      password: ${?LITFASS_USERS_ADMIN_PASSWORD}
      roles: ["ADMIN"]
    }
    //user: {
    //  password: "user",
    //  roles: [
    //    "ADMIN"
    //    "READER"
    //    "WRITER"
    //    "EXECUTOR"
    //  ]
    //}
    // Alternative config with environment variables
    //CONFIG_FORCE_litfass_users_user_password=user
    //CONFIG_FORCE_litfass_users_user_roles_0=READER
    //CONFIG_FORCE_litfass_users_user_roles_1=WRITER
    //CONFIG_FORCE_litfass_users_user_roles_2=EXECUTOR
  }
  jdbc {
    url: "jdbc:postgresql://localhost:5432"
    url: ${?LITFASS_JDBC_URL}
    database: "litfass"
    database: ${?LITFASS_JDBC_DATABASE}
    username: "admin"
    username: ${?LITFASS_JDBC_USERNAME}
    password: "admin"
    password: ${?LITFASS_JDBC_PASSWORD}
    poolSize: 1
    poolSize: ${?LITFASS_JDBC_POOL_SIZE}
  }
}

akka {
  loglevel = "INFO"
  loglevel = ${?LITFASS_LOG_LEVEL}

  coordinated-shutdown.exit-jvm = on

  actor {
    provider = cluster

    serialization-bindings {
      "lit.fass.server.actor.SerializationMarker" = jackson-json
    }
    serializers {
      jackson-json = "akka.serialization.jackson.JacksonJsonSerializer"
    }
  }


  remote {
    artery {
      enabled = on
      transport = tcp
      canonical {
        hostname = localhost
        hostname = ${?LITFASS_AKKA_REMOTE_CANONICAL_HOSTNAME}
        port = 0
        port = ${?LITFASS_AKKA_REMOTE_CANONICAL_PORT}
      }
      bind {
        hostname = localhost
        hostname = ${?LITFASS_AKKA_REMOTE_BIND_HOSTNAME}
        port = ""
        port = ${?LITFASS_AKKA_REMOTE_BIND_PORT}
      }
      advanced {
        # Maximum serialized message size, including header data.
        maximum-frame-size = 2 MiB
        maximum-frame-size = ${?LITFASS_AKKA_REMOTE_MAXIMUM_FRAME_SIZE}
        # Direct byte buffers are reused in a pool with this maximum size.
        # Each buffer has the size of 'maximum-frame-size'.
        # This is not a hard upper limit on number of created buffers. Additional
        # buffers will be created if needed, e.g. when using many outbound
        # associations at the same time. Such additional buffers will be garbage
        # collected, which is not as efficient as reusing buffers in the pool.
        buffer-pool-size = 128
        buffer-pool-size = ${?LITFASS_AKKA_REMOTE_BUFFER_POOL_SIZE}
        # Maximum serialized message size for the large messages, including header data.
        # It is currently restricted to 1/8th the size of a term buffer that can be
        # configured by setting the 'aeron.term.buffer.length' system property.
        # See 'large-message-destinations'.
        maximum-large-frame-size = 2 MiB
        maximum-large-frame-size = ${?LITFASS_AKKA_REMOTE_MAXIMUM_LARGE_FRAME_SIZE}
        # Direct byte buffers for the large messages are reused in a pool with this maximum size.
        # Each buffer has the size of 'maximum-large-frame-size'.
        # See 'large-message-destinations'.
        # This is not a hard upper limit on number of created buffers. Additional
        # buffers will be created if needed, e.g. when using many outbound
        # associations at the same time. Such additional buffers will be garbage
        # collected, which is not as efficient as reusing buffers in the pool.
        large-buffer-pool-size = 32
        large-buffer-pool-size = ${?LITFASS_AKKA_REMOTE_LARGE_BUFFER_POOL_SIZE}
      }
    }
  }

  cluster {
    shutdown-after-unsuccessful-join-seed-nodes = 30s
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
    // Seed nodes can also be set by overriding the configuration with environment variables like CONFIG_FORCE_akka_cluster_seed__nodes_0=akka://litfass@localhost:25520
    //seed-nodes = ["akka://litfass@localhost:25520"]
  }

  management {
    http {
      port = 8558
      port = ${?LITFASS_AKKA_MGMT_PORT}
      bind-hostname = 0.0.0.0
      bind-hostname = ${?LITFASS_AKKA_MGMT_BIND_HOSTNAME}
    }
    cluster {
      bootstrap {
        contact-point-discovery {
          discovery-method = kubernetes-api // https://doc.akka.io/docs/akka-management/1.0/discovery/kubernetes.html
          required-contact-point-nr = 1
          required-contact-point-nr = ${?LITFASS_AKKA_CLUSTER_REQUIRED_CONTACT_POINTS}
        }
      }
    }
  }
}
